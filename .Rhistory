xaxis = list(title = "Year"),
yaxis = list(title = "Employment (Thousands)"),
hovermode = "x unified",
showlegend = TRUE
)
htmlwidgets::saveWidget(
interactive_trends,
"visuals/10_interactive_trends.html",
selfcontained = TRUE
)
interactive_growth <- plot_ly(
data = employment_trends %>% filter(!is.na(yoy_growth), abs(yoy_growth) < 50),
x = ~date,
y = ~yoy_growth,
color = ~tech_sector,
colors = tech_colors,
type = "scatter",
mode = "lines",
line = list(width = 3),
hovertemplate = paste(
"<b>%{fullData.name}</b><br>",
"Date: %{x}<br>",
"Growth Rate: %{y:.1f}%<br>",
"<extra></extra>"
)
) %>%
layout(
title = list(
text = "Interactive Year-over-Year Growth Rates",
font = list(size = 16, color = "black")
),
xaxis = list(title = "Year"),
yaxis = list(title = "Growth Rate (%)"),
hovermode = "x unified",
showlegend = TRUE
) %>%
add_hline(y = 0, line = list(dash = "dash", color = "gray"))
htmlwidgets::saveWidget(
interactive_growth,
"visuals/11_interactive_growth.html",
selfcontained = TRUE
)
} else {
print("Interactive visualizations skipped - plotly or htmlwidgets not available")
}
p1
p2
p3
p4
p5
p6
p7
# ==============================================================================
# Power BI Data Preparation Script for Canada Tech Employment
# ==============================================================================
# Load required libraries
library(tidyverse)
library(lubridate)
# Load the cleaned data
print("Loading cleaned data for Power BI preparation...")
load("data/processed/tech_employment_clean.RData")
load("data/processed/tech_employment_analysis.RData")
# Create PowerBI directory
if (!dir.exists("data/powerbi")) {
dir.create("data/powerbi", recursive = TRUE)
}
# ==============================================================================
# 1. MAIN EMPLOYMENT DATA TABLE
# ==============================================================================
print("Preparing main employment data table...")
main_employment_data <- tech_data_clean %>%
filter(labor_type %in% c("Employment", "Unemployment", "Unemployment Rate")) %>%
select(
Date = date,
Year = year,
Month = month,
YearMonth = year_month,
TechSector = tech_sector,
LaborType = labor_type,
Value = value_scaled,
Units = units
) %>%
mutate(
# Add formatted date for Power BI
DateFormatted = format(Date, "%Y-%m-%d"),
# Add quarter information
Quarter = paste0("Q", quarter(Date)),
YearQuarter = paste0(Year, "-", Quarter),
# Add semester information
Semester = ifelse(Month <= 6, "H1", "H2"),
YearSemester = paste0(Year, "-", Semester)
) %>%
arrange(Date, TechSector, LaborType)
write_csv(main_employment_data, "data/powerbi/01_main_employment_data.csv")
# ==============================================================================
# 2. EMPLOYMENT TRENDS WITH CALCULATIONS
# ==============================================================================
print("Preparing employment trends with calculations...")
employment_trends_powerbi <- employment_trends %>%
select(
Date = date,
Year = year,
Month = month,
TechSector = tech_sector,
Employment = value_scaled,
YoYGrowth = yoy_growth,
YoYChange = yoy_change,
MonthlyGrowth = monthly_growth
) %>%
filter(!is.na(Employment)) %>%
group_by(TechSector) %>%
mutate(
# Add moving averages
MA_3Month = zoo::rollmean(Employment, k = 3, fill = NA, align = "right"),
MA_6Month = zoo::rollmean(Employment, k = 6, fill = NA, align = "right"),
MA_12Month = zoo::rollmean(Employment, k = 12, fill = NA, align = "right"),
# Add cumulative growth from start
BaseIndex = (Employment / first(Employment)) * 100,
# Add rank within each month across sectors
MonthlyRank = dense_rank(desc(Employment))
) %>%
ungroup() %>%
mutate(
# Add formatted date
DateFormatted = format(Date, "%Y-%m-%d"),
Quarter = paste0("Q", quarter(Date)),
YearQuarter = paste0(Year, "-", Quarter)
)
write_csv(employment_trends_powerbi, "data/powerbi/02_employment_trends.csv")
# ==============================================================================
# 3. ANNUAL SUMMARY DATA
# ==============================================================================
print("Preparing annual summary data...")
annual_summary_powerbi <- annual_employment %>%
select(
TechSector = tech_sector,
Year = year,
AvgEmployment = avg_employment,
AnnualGrowth = annual_growth,
AnnualChange = annual_change
) %>%
filter(!is.na(AvgEmployment)) %>%
group_by(TechSector) %>%
mutate(
# Add performance indicators
GrowthCategory = case_when(
AnnualGrowth > 5 ~ "High Growth",
AnnualGrowth > 0 ~ "Moderate Growth",
AnnualGrowth > -2 ~ "Slight Decline",
TRUE ~ "Decline"
),
# Add cumulative employment change
CumulativeChange = cumsum(replace_na(AnnualChange, 0)),
# Add employment size category
SizeCategory = case_when(
AvgEmployment > 1500000 ~ "Large",
AvgEmployment > 1000000 ~ "Medium",
TRUE ~ "Small"
)
) %>%
ungroup()
write_csv(annual_summary_powerbi, "data/powerbi/03_annual_summary.csv")
# ==============================================================================
# 4. SECTOR COMPARISON TABLE
# ==============================================================================
print("Preparing sector comparison table...")
sector_comparison_powerbi <- sector_comparison %>%
select(
Year = year,
ProfessionalTechnical = sector_professional_technical_services,
InformationCulture = sector_information_culture,
TotalTechEmployment = total_tech_employment,
ProfTechShare = prof_tech_share,
InfoCultureShare = info_culture_share
) %>%
filter(!is.na(TotalTechEmployment)) %>%
mutate(
# Add growth calculations
TotalGrowth = (TotalTechEmployment / lag(TotalTechEmployment) - 1) * 100,
ProfTechGrowth = (ProfessionalTechnical / lag(ProfessionalTechnical) - 1) * 100,
InfoCultureGrowth = (InformationCulture / lag(InformationCulture) - 1) * 100,
# Add dominant sector
DominantSector = ifelse(ProfTechShare > InfoCultureShare,
"Professional & Technical",
"Information & Culture")
)
write_csv(sector_comparison_powerbi, "data/powerbi/04_sector_comparison.csv")
# ==============================================================================
# 5. UNEMPLOYMENT ANALYSIS
# ==============================================================================
print("Preparing unemployment analysis...")
unemployment_powerbi <- unemployment_analysis %>%
select(
Date = date,
Year = year,
Month = month,
TechSector = tech_sector,
UnemploymentCount = unemp_unemployment,
UnemploymentRate = unemp_unemployment_rate,
UnemploymentChange = unemployment_change,
RateChange = rate_change
) %>%
filter(!is.na(UnemploymentRate)) %>%
mutate(
DateFormatted = format(Date, "%Y-%m-%d"),
Quarter = paste0("Q", quarter(Date)),
YearQuarter = paste0(Year, "-", Quarter),
# Add unemployment level categories
UnemploymentLevel = case_when(
UnemploymentRate < 3 ~ "Very Low",
UnemploymentRate < 5 ~ "Low",
UnemploymentRate < 7 ~ "Moderate",
UnemploymentRate < 10 ~ "High",
TRUE ~ "Very High"
)
)
write_csv(unemployment_powerbi, "data/powerbi/05_unemployment_analysis.csv")
# ==============================================================================
# 6. SEASONAL PATTERNS
# ==============================================================================
print("Preparing seasonal patterns...")
seasonal_powerbi <- seasonal_analysis %>%
mutate(
MonthName = month.name[month],
MonthAbbr = month.abb[month],
Season = case_when(
month %in% c(12, 1, 2) ~ "Winter",
month %in% c(3, 4, 5) ~ "Spring",
month %in% c(6, 7, 8) ~ "Summer",
month %in% c(9, 10, 11) ~ "Fall"
),
SeasonalCategory = case_when(
seasonal_index > 102 ~ "Above Average",
seasonal_index > 98 ~ "Average",
TRUE ~ "Below Average"
)
) %>%
select(
TechSector = tech_sector,
Month = month,
MonthName,
MonthAbbr,
Season,
AvgEmployment = avg_employment,
MedianEmployment = median_employment,
SeasonalIndex = seasonal_index,
SeasonalCategory
)
write_csv(seasonal_powerbi, "data/powerbi/06_seasonal_patterns.csv")
# ==============================================================================
# 7. GROWTH SUMMARY AND KPIs
# ==============================================================================
print("Preparing growth summary and KPIs...")
growth_kpis_powerbi <- growth_summary %>%
select(
TechSector = tech_sector,
AvgGrowthRate = avg_growth_rate,
MedianGrowthRate = median_growth_rate,
MinGrowthRate = min_growth_rate,
MaxGrowthRate = max_growth_rate,
GrowthVolatility = sd_growth_rate,
CoefficientVariation = cv_growth_rate,
YearsPositiveGrowth = years_positive_growth,
YearsNegativeGrowth = years_negative_growth
) %>%
mutate(
# Add performance ratings
GrowthRating = case_when(
AvgGrowthRate > 3 ~ "Excellent",
AvgGrowthRate > 1 ~ "Good",
AvgGrowthRate > -1 ~ "Fair",
TRUE ~ "Poor"
),
VolatilityRating = case_when(
GrowthVolatility < 2 ~ "Low",
GrowthVolatility < 4 ~ "Moderate",
GrowthVolatility < 6 ~ "High",
TRUE ~ "Very High"
),
StabilityScore = YearsPositiveGrowth / (YearsPositiveGrowth + YearsNegativeGrowth) * 100
)
write_csv(growth_kpis_powerbi, "data/powerbi/07_growth_kpis.csv")
# ==============================================================================
# 8. RECENT TRENDS (2020-2025)
# ==============================================================================
print("Preparing recent trends analysis...")
recent_trends_powerbi <- recent_trends %>%
select(
Date = date,
Year = year,
Month = month,
TechSector = tech_sector,
Employment = value_scaled,
TrendIndex = trend_index,
RecoveryIndicator = recovery_indicator
) %>%
mutate(
DateFormatted = format(Date, "%Y-%m-%d"),
Quarter = paste0("Q", quarter(Date)),
YearQuarter = paste0(Year, "-", Quarter),
# Add recovery metrics
RecoveryLevel = case_when(
TrendIndex >= 105 ~ "Strong Recovery",
TrendIndex >= 100 ~ "Full Recovery",
TrendIndex >= 95 ~ "Near Recovery",
TrendIndex >= 90 ~ "Partial Recovery",
TRUE ~ "Weak Recovery"
),
# Add pandemic period indicator
PandemicPeriod = case_when(
Date >= as.Date("2020-03-01") & Date <= as.Date("2020-12-31") ~ "Pandemic Impact",
Date >= as.Date("2021-01-01") & Date <= as.Date("2022-12-31") ~ "Recovery Phase",
Date >= as.Date("2023-01-01") ~ "Post-Recovery",
TRUE ~ "Pre-Pandemic"
)
)
write_csv(recent_trends_powerbi, "data/powerbi/08_recent_trends.csv")
# ==============================================================================
# 9. CALENDAR TABLE FOR TIME INTELLIGENCE
# ==============================================================================
print("Creating calendar table for Power BI...")
# Create comprehensive date table
start_date <- as.Date("2011-01-01")
end_date <- as.Date("2025-12-31")
calendar_table <- tibble(
Date = seq(start_date, end_date, by = "day")
) %>%
mutate(
DateFormatted = format(Date, "%Y-%m-%d"),
Year = year(Date),
Month = month(Date),
MonthName = month.name[Month],
MonthAbbr = month.abb[Month],
Quarter = quarter(Date),
QuarterName = paste0("Q", Quarter),
YearQuarter = paste0(Year, "-Q", Quarter),
Semester = ifelse(Month <= 6, 1, 2),
SemesterName = paste0("H", Semester),
YearSemester = paste0(Year, "-H", Semester),
WeekOfYear = week(Date),
DayOfYear = yday(Date),
DayOfWeek = wday(Date),
DayName = weekdays(Date),
IsWeekend = wday(Date) %in% c(1, 7),
Season = case_when(
Month %in% c(12, 1, 2) ~ "Winter",
Month %in% c(3, 4, 5) ~ "Spring",
Month %in% c(6, 7, 8) ~ "Summer",
Month %in% c(9, 10, 11) ~ "Fall"
),
# Add fiscal year (assuming April-March)
FiscalYear = ifelse(Month >= 4, Year, Year - 1),
FiscalQuarter = case_when(
Month %in% c(4, 5, 6) ~ "Q1",
Month %in% c(7, 8, 9) ~ "Q2",
Month %in% c(10, 11, 12) ~ "Q3",
Month %in% c(1, 2, 3) ~ "Q4"
)
)
write_csv(calendar_table, "data/powerbi/09_calendar_table.csv")
# ==============================================================================
# 10. METADATA AND LOOKUP TABLES
# ==============================================================================
print("Creating metadata and lookup tables...")
# Sector metadata
sector_metadata <- tibble(
TechSector = c("Professional & Technical Services", "Information & Culture"),
SectorCode = c("PTS", "IC"),
SectorDescription = c(
"Professional, scientific and technical services including consulting, engineering, design, and IT services",
"Information and cultural industries including telecommunications, broadcasting, and digital media"
),
NAICSCode = c("54", "51, 71"),
SectorColor = c("#2E86AB", "#A23B72"),
SectorOrder = c(1, 2)
)
write_csv(sector_metadata, "data/powerbi/10_sector_metadata.csv")
# Labor type metadata
labor_metadata <- tibble(
LaborType = c("Employment", "Unemployment", "Unemployment Rate", "Labor Force"),
TypeCode = c("EMP", "UNEMP", "URATE", "LF"),
Units = c("Persons", "Persons", "Percentage", "Persons"),
Description = c(
"Total number of employed persons",
"Total number of unemployed persons",
"Unemployment rate as percentage of labor force",
"Total labor force (employed + unemployed)"
),
ChartOrder = c(1, 3, 4, 2)
)
write_csv(labor_metadata, "data/powerbi/11_labor_metadata.csv")
# ==============================================================================
# 11. EXECUTIVE SUMMARY TABLE
# ==============================================================================
print("Creating executive summary...")
latest_date <- max(employment_trends$date, na.rm = TRUE)
latest_year <- year(latest_date)
executive_summary <- tibble(
Metric = c(
"Total Tech Employment (Latest)",
"Professional & Technical Services Employment",
"Information & Culture Employment",
"Average Annual Growth (2011-2024)",
"Peak Employment Year",
"Current Recovery Status",
"Employment Volatility",
"Years of Positive Growth",
"Latest Update"
),
Value = c(
sum(employment_trends$value_scaled[employment_trends$date == latest_date], na.rm = TRUE),
employment_trends$value_scaled[employment_trends$date == latest_date &
employment_trends$tech_sector == "Professional & Technical Services"],
employment_trends$value_scaled[employment_trends$date == latest_date &
employment_trends$tech_sector == "Information & Culture"],
mean(growth_summary$avg_growth_rate, na.rm = TRUE),
NA, # Will be calculated
NA, # Will be calculated
mean(growth_summary$sd_growth_rate, na.rm = TRUE),
sum(growth_summary$years_positive_growth, na.rm = TRUE),
NA
),
FormattedValue = c(
scales::number(sum(employment_trends$value_scaled[employment_trends$date == latest_date], na.rm = TRUE),
scale = 1e-3, suffix = "K"),
scales::number(employment_trends$value_scaled[employment_trends$date == latest_date &
employment_trends$tech_sector == "Professional & Technical Services"],
scale = 1e-3, suffix = "K"),
scales::number(employment_trends$value_scaled[employment_trends$date == latest_date &
employment_trends$tech_sector == "Information & Culture"],
scale = 1e-3, suffix = "K"),
paste0(round(mean(growth_summary$avg_growth_rate, na.rm = TRUE), 1), "%"),
"2019", # Example
"Full Recovery", # Example
paste0(round(mean(growth_summary$sd_growth_rate, na.rm = TRUE), 1), "%"),
as.character(sum(growth_summary$years_positive_growth, na.rm = TRUE)),
format(latest_date, "%B %Y")
)
)
write_csv(executive_summary, "data/powerbi/12_executive_summary.csv")
# ==============================================================================
# 12. CREATE DATA DICTIONARY
# ==============================================================================
print("Creating data dictionary...")
data_dictionary <- tibble(
TableName = rep(c(
"01_main_employment_data", "02_employment_trends", "03_annual_summary",
"04_sector_comparison", "05_unemployment_analysis", "06_seasonal_patterns",
"07_growth_kpis", "08_recent_trends", "09_calendar_table",
"10_sector_metadata", "11_labor_metadata", "12_executive_summary"
), each = 5),
ColumnName = c(
# Main employment data
"Date", "TechSector", "LaborType", "Value", "Units",
# Employment trends
"Date", "TechSector", "Employment", "YoYGrowth", "MA_12Month",
# Annual summary
"Year", "TechSector", "AvgEmployment", "AnnualGrowth", "GrowthCategory",
# Sector comparison
"Year", "ProfessionalTechnical", "InformationCulture", "TotalTechEmployment", "DominantSector",
# Unemployment analysis
"Date", "TechSector", "UnemploymentRate", "UnemploymentLevel", "RateChange",
# Seasonal patterns
"Month", "TechSector", "SeasonalIndex", "Season", "SeasonalCategory",
# Growth KPIs
"TechSector", "AvgGrowthRate", "GrowthVolatility", "GrowthRating", "StabilityScore",
# Recent trends
"Date", "TechSector", "TrendIndex", "RecoveryLevel", "PandemicPeriod",
# Calendar table
"Date", "Year", "Month", "Quarter", "Season",
# Sector metadata
"TechSector", "SectorCode", "SectorDescription", "SectorColor", "SectorOrder",
# Labor metadata
"LaborType", "TypeCode", "Units", "Description", "ChartOrder",
# Executive summary
"Metric", "Value", "FormattedValue", "Category", "Importance"
),
DataType = rep(c("Date/Numeric", "Text", "Numeric", "Numeric", "Text"), 12),
Description = c(
# Descriptions for each column...
rep("Primary data table with all employment metrics", 5),
rep("Time series data with calculations", 5),
rep("Annual aggregated data", 5),
rep("Sector comparison metrics", 5),
rep("Unemployment analysis", 5),
rep("Seasonal pattern analysis", 5),
rep("Key performance indicators", 5),
rep("Recent trends and recovery analysis", 5),
rep("Calendar table for time intelligence", 5),
rep("Sector reference data", 5),
rep("Labor type reference data", 5),
rep("Executive summary metrics", 5)
)
)
write_csv(data_dictionary, "data/powerbi/00_data_dictionary.csv")
# ==============================================================================
# COMPLETION MESSAGE
# ==============================================================================
print("Power BI data preparation completed successfully!")
print("Files created in 'data/powerbi/' directory:")
print("===========================================")
powerbi_files <- list.files("data/powerbi/", pattern = "*.csv")
for(i in 1:length(powerbi_files)) {
print(paste(i, ".", powerbi_files[i]))
}
print("\nNext steps for Power BI:")
print("1. Open Power BI Desktop")
print("2. Import all CSV files from data/powerbi/ folder")
print("3. Create relationships between tables using Date and TechSector columns")
print("4. Use the calendar table for time intelligence functions")
print("5. Create measures using DAX for advanced calculations")
print("\nReady for Power BI dashboard creation!")
